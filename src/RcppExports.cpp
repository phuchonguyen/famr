// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rgig_cpp
double rgig_cpp(double lam, double chi, double psi);
RcppExport SEXP _famr_rgig_cpp(SEXP lamSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(rgig_cpp(lam, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// update_zeta
arma::vec update_zeta(arma::vec psi, int q, double global_shrink);
RcppExport SEXP _famr_update_zeta(SEXP psiSEXP, SEXP qSEXP, SEXP global_shrinkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type global_shrink(global_shrinkSEXP);
    rcpp_result_gen = Rcpp::wrap(update_zeta(psi, q, global_shrink));
    return rcpp_result_gen;
END_RCPP
}
// update_psi
arma::vec update_psi(arma::mat B, arma::mat Sigmainv, arma::mat B0, arma::vec zeta, int q, int p);
RcppExport SEXP _famr_update_psi(SEXP BSEXP, SEXP SigmainvSEXP, SEXP B0SEXP, SEXP zetaSEXP, SEXP qSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigmainv(SigmainvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_psi(B, Sigmainv, B0, zeta, q, p));
    return rcpp_result_gen;
END_RCPP
}
// update_B_TPBN
arma::mat update_B_TPBN(arma::mat X, arma::mat Y, arma::mat Sigma, arma::mat B0, arma::vec psi, int q, int p);
RcppExport SEXP _famr_update_B_TPBN(SEXP XSEXP, SEXP YSEXP, SEXP SigmaSEXP, SEXP B0SEXP, SEXP psiSEXP, SEXP qSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_TPBN(X, Y, Sigma, B0, psi, q, p));
    return rcpp_result_gen;
END_RCPP
}
// update_eta_gibbs_cpp
arma::mat update_eta_gibbs_cpp(arma::mat eta, arma::mat B, arma::mat Theta, arma::mat Sigmay_inv, arma::vec sigmax_sqinv, arma::mat Y, arma::mat X, int K, int p, int t, int n, int q, int q_int, arma::vec uid, arma::mat Z, arma::mat Z_int);
RcppExport SEXP _famr_update_eta_gibbs_cpp(SEXP etaSEXP, SEXP BSEXP, SEXP ThetaSEXP, SEXP Sigmay_invSEXP, SEXP sigmax_sqinvSEXP, SEXP YSEXP, SEXP XSEXP, SEXP KSEXP, SEXP pSEXP, SEXP tSEXP, SEXP nSEXP, SEXP qSEXP, SEXP q_intSEXP, SEXP uidSEXP, SEXP ZSEXP, SEXP Z_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigmay_inv(Sigmay_invSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmax_sqinv(sigmax_sqinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type q_int(q_intSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type uid(uidSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z_int(Z_intSEXP);
    rcpp_result_gen = Rcpp::wrap(update_eta_gibbs_cpp(eta, B, Theta, Sigmay_inv, sigmax_sqinv, Y, X, K, p, t, n, q, q_int, uid, Z, Z_int));
    return rcpp_result_gen;
END_RCPP
}
// submat_cpp
arma::mat submat_cpp(arma::mat M, arma::uvec idx, arma::uvec idy);
RcppExport SEXP _famr_submat_cpp(SEXP MSEXP, SEXP idxSEXP, SEXP idySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idy(idySEXP);
    rcpp_result_gen = Rcpp::wrap(submat_cpp(M, idx, idy));
    return rcpp_result_gen;
END_RCPP
}
// impute_X_lod_cpp
arma::mat impute_X_lod_cpp(arma::mat eta, arma::mat Theta, arma::mat X, arma::vec sigmax_sqinv, int n, arma::mat Ilod, arma::vec llod, arma::vec ulod);
RcppExport SEXP _famr_impute_X_lod_cpp(SEXP etaSEXP, SEXP ThetaSEXP, SEXP XSEXP, SEXP sigmax_sqinvSEXP, SEXP nSEXP, SEXP IlodSEXP, SEXP llodSEXP, SEXP ulodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmax_sqinv(sigmax_sqinvSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ilod(IlodSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type llod(llodSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ulod(ulodSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_X_lod_cpp(eta, Theta, X, sigmax_sqinv, n, Ilod, llod, ulod));
    return rcpp_result_gen;
END_RCPP
}
// impute_Ymis_cpp
arma::mat impute_Ymis_cpp(arma::mat Y, arma::mat M, arma::mat Sigma, arma::mat O, int n, int t);
RcppExport SEXP _famr_impute_Ymis_cpp(SEXP YSEXP, SEXP MSEXP, SEXP SigmaSEXP, SEXP OSEXP, SEXP nSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type O(OSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_Ymis_cpp(Y, M, Sigma, O, n, t));
    return rcpp_result_gen;
END_RCPP
}
// impute_Yprobit_cpp
arma::mat impute_Yprobit_cpp(arma::mat Y, arma::mat M, arma::mat Sigma, arma::mat Yraw, arma::vec binary, int n, int t);
RcppExport SEXP _famr_impute_Yprobit_cpp(SEXP YSEXP, SEXP MSEXP, SEXP SigmaSEXP, SEXP YrawSEXP, SEXP binarySEXP, SEXP nSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yraw(YrawSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type binary(binarySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_Yprobit_cpp(Y, M, Sigma, Yraw, binary, n, t));
    return rcpp_result_gen;
END_RCPP
}
// update_Theta_MGP_cpp
arma::mat update_Theta_MGP_cpp(arma::mat eta, arma::vec sigmax_sqinv, arma::mat phi, arma::vec delta, arma::vec tau, int K, int p, arma::mat X);
RcppExport SEXP _famr_update_Theta_MGP_cpp(SEXP etaSEXP, SEXP sigmax_sqinvSEXP, SEXP phiSEXP, SEXP deltaSEXP, SEXP tauSEXP, SEXP KSEXP, SEXP pSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmax_sqinv(sigmax_sqinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Theta_MGP_cpp(eta, sigmax_sqinv, phi, delta, tau, K, p, X));
    return rcpp_result_gen;
END_RCPP
}
// update_phi_MGP_cpp
arma::mat update_phi_MGP_cpp(arma::mat Theta, arma::vec tau, int K, int p, arma::mat v1, arma::mat v2);
RcppExport SEXP _famr_update_phi_MGP_cpp(SEXP ThetaSEXP, SEXP tauSEXP, SEXP KSEXP, SEXP pSEXP, SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(update_phi_MGP_cpp(Theta, tau, K, p, v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// update_delta_MGP_cpp
arma::vec update_delta_MGP_cpp(arma::vec delta, arma::vec tau, arma::mat Theta, arma::mat phi, int K, int p);
RcppExport SEXP _famr_update_delta_MGP_cpp(SEXP deltaSEXP, SEXP tauSEXP, SEXP ThetaSEXP, SEXP phiSEXP, SEXP KSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_delta_MGP_cpp(delta, tau, Theta, phi, K, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_famr_rgig_cpp", (DL_FUNC) &_famr_rgig_cpp, 3},
    {"_famr_update_zeta", (DL_FUNC) &_famr_update_zeta, 3},
    {"_famr_update_psi", (DL_FUNC) &_famr_update_psi, 6},
    {"_famr_update_B_TPBN", (DL_FUNC) &_famr_update_B_TPBN, 7},
    {"_famr_update_eta_gibbs_cpp", (DL_FUNC) &_famr_update_eta_gibbs_cpp, 16},
    {"_famr_submat_cpp", (DL_FUNC) &_famr_submat_cpp, 3},
    {"_famr_impute_X_lod_cpp", (DL_FUNC) &_famr_impute_X_lod_cpp, 8},
    {"_famr_impute_Ymis_cpp", (DL_FUNC) &_famr_impute_Ymis_cpp, 6},
    {"_famr_impute_Yprobit_cpp", (DL_FUNC) &_famr_impute_Yprobit_cpp, 7},
    {"_famr_update_Theta_MGP_cpp", (DL_FUNC) &_famr_update_Theta_MGP_cpp, 8},
    {"_famr_update_phi_MGP_cpp", (DL_FUNC) &_famr_update_phi_MGP_cpp, 6},
    {"_famr_update_delta_MGP_cpp", (DL_FUNC) &_famr_update_delta_MGP_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_famr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
