// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_intercept_cpp
void update_intercept_cpp(arma::mat& alpha, arma::vec& mu, arma::vec& v, const arma::mat& Y, const arma::uvec& id, const arma::uvec& uid, const arma::mat& Sigma, const arma::mat& Sigmainv, double v0, double s0, bool random_intercept, int n, int N, int q);
RcppExport SEXP _famr_update_intercept_cpp(SEXP alphaSEXP, SEXP muSEXP, SEXP vSEXP, SEXP YSEXP, SEXP idSEXP, SEXP uidSEXP, SEXP SigmaSEXP, SEXP SigmainvSEXP, SEXP v0SEXP, SEXP s0SEXP, SEXP random_interceptSEXP, SEXP nSEXP, SEXP NSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type uid(uidSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigmainv(SigmainvSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< bool >::type random_intercept(random_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    update_intercept_cpp(alpha, mu, v, Y, id, uid, Sigma, Sigmainv, v0, s0, random_intercept, n, N, q);
    return R_NilValue;
END_RCPP
}
// update_B_DL_cpp
void update_B_DL_cpp(arma::mat& B, const arma::mat& Y, const arma::mat& X, const arma::mat& Sigma_inv, const arma::mat& V, int n, int q, int p);
RcppExport SEXP _famr_update_B_DL_cpp(SEXP BSEXP, SEXP YSEXP, SEXP XSEXP, SEXP Sigma_invSEXP, SEXP VSEXP, SEXP nSEXP, SEXP qSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_inv(Sigma_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    update_B_DL_cpp(B, Y, X, Sigma_inv, V, n, q, p);
    return R_NilValue;
END_RCPP
}
// update_nu_DL_cpp
void update_nu_DL_cpp(arma::vec& nu, const arma::mat& B, const arma::mat& psi, const arma::mat& zeta, int p, int q);
RcppExport SEXP _famr_update_nu_DL_cpp(SEXP nuSEXP, SEXP BSEXP, SEXP psiSEXP, SEXP zetaSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    update_nu_DL_cpp(nu, B, psi, zeta, p, q);
    return R_NilValue;
END_RCPP
}
// update_psi_DL_cpp
void update_psi_DL_cpp(arma::mat& psi, const arma::mat& B, int p, int q);
RcppExport SEXP _famr_update_psi_DL_cpp(SEXP psiSEXP, SEXP BSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    update_psi_DL_cpp(psi, B, p, q);
    return R_NilValue;
END_RCPP
}
// update_zeta_DL_cpp
void update_zeta_DL_cpp(arma::mat& zeta, const arma::mat& psi, const arma::mat& B, const arma::vec& nu);
RcppExport SEXP _famr_update_zeta_DL_cpp(SEXP zetaSEXP, SEXP psiSEXP, SEXP BSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    update_zeta_DL_cpp(zeta, psi, B, nu);
    return R_NilValue;
END_RCPP
}
// update_zeta_TPBN_cpp
arma::vec update_zeta_TPBN_cpp(arma::vec psi, int q, double global_shrink);
RcppExport SEXP _famr_update_zeta_TPBN_cpp(SEXP psiSEXP, SEXP qSEXP, SEXP global_shrinkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type global_shrink(global_shrinkSEXP);
    rcpp_result_gen = Rcpp::wrap(update_zeta_TPBN_cpp(psi, q, global_shrink));
    return rcpp_result_gen;
END_RCPP
}
// update_psi_TPBN_cpp
arma::vec update_psi_TPBN_cpp(arma::mat B, arma::mat Sigmainv, arma::vec zeta, int q, int p);
RcppExport SEXP _famr_update_psi_TPBN_cpp(SEXP BSEXP, SEXP SigmainvSEXP, SEXP zetaSEXP, SEXP qSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigmainv(SigmainvSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_psi_TPBN_cpp(B, Sigmainv, zeta, q, p));
    return rcpp_result_gen;
END_RCPP
}
// update_B_TPBN_cpp
arma::mat update_B_TPBN_cpp(arma::mat X, arma::mat Y, arma::mat Sigma, arma::vec psi, int p, int q);
RcppExport SEXP _famr_update_B_TPBN_cpp(SEXP XSEXP, SEXP YSEXP, SEXP SigmaSEXP, SEXP psiSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_TPBN_cpp(X, Y, Sigma, psi, p, q));
    return rcpp_result_gen;
END_RCPP
}
// update_B_GP_cpp
arma::cube update_B_GP_cpp(const arma::mat& Y, const arma::vec& time, const arma::cube& Bt_eta_k, const arma::mat& eta, const arma::cube& C_inv, const arma::vec& psi, const arma::vec& id, double sinv, const arma::mat& Sigma, int K, int q, int T, int n);
RcppExport SEXP _famr_update_B_GP_cpp(SEXP YSEXP, SEXP timeSEXP, SEXP Bt_eta_kSEXP, SEXP etaSEXP, SEXP C_invSEXP, SEXP psiSEXP, SEXP idSEXP, SEXP sinvSEXP, SEXP SigmaSEXP, SEXP KSEXP, SEXP qSEXP, SEXP TSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Bt_eta_k(Bt_eta_kSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type C_inv(C_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< double >::type sinv(sinvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_GP_cpp(Y, time, Bt_eta_k, eta, C_inv, psi, id, sinv, Sigma, K, q, T, n));
    return rcpp_result_gen;
END_RCPP
}
// update_B_GP_amplitude_cpp
arma::vec update_B_GP_amplitude_cpp(arma::vec& psi_sq, arma::vec& zeta, double tau_sq, double phi, int K, int q, int T, const arma::cube& Ci, const arma::mat& Si, const arma::cube& B);
RcppExport SEXP _famr_update_B_GP_amplitude_cpp(SEXP psi_sqSEXP, SEXP zetaSEXP, SEXP tau_sqSEXP, SEXP phiSEXP, SEXP KSEXP, SEXP qSEXP, SEXP TSEXP, SEXP CiSEXP, SEXP SiSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type psi_sq(psi_sqSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau_sq(tau_sqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Ci(CiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_GP_amplitude_cpp(psi_sq, zeta, tau_sq, phi, K, q, T, Ci, Si, B));
    return rcpp_result_gen;
END_RCPP
}
// update_eta_mh_cpp
void update_eta_mh_cpp(arma::mat& eta, const arma::cube Bt, const arma::mat& B, const arma::mat& Theta, const arma::cube& Omega, const arma::mat& Sigmay_inv, const arma::vec& sigmax_sqinv, const arma::mat& Y, const arma::mat& X, const arma::mat& Z_int, const arma::vec& uid, const arma::vec& id, const arma::uvec& time, int K, int p, int q, int n, int p_int, arma::vec& n_accepted, arma::vec& eps, arma::cube& A, arma::mat& b, arma::vec& lpmf, int s, bool adaptiveM, bool adaptiveMWG, int batch_size);
RcppExport SEXP _famr_update_eta_mh_cpp(SEXP etaSEXP, SEXP BtSEXP, SEXP BSEXP, SEXP ThetaSEXP, SEXP OmegaSEXP, SEXP Sigmay_invSEXP, SEXP sigmax_sqinvSEXP, SEXP YSEXP, SEXP XSEXP, SEXP Z_intSEXP, SEXP uidSEXP, SEXP idSEXP, SEXP timeSEXP, SEXP KSEXP, SEXP pSEXP, SEXP qSEXP, SEXP nSEXP, SEXP p_intSEXP, SEXP n_acceptedSEXP, SEXP epsSEXP, SEXP ASEXP, SEXP bSEXP, SEXP lpmfSEXP, SEXP sSEXP, SEXP adaptiveMSEXP, SEXP adaptiveMWGSEXP, SEXP batch_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Bt(BtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigmay_inv(Sigmay_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmax_sqinv(sigmax_sqinvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_int(Z_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type uid(uidSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p_int(p_intSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n_accepted(n_acceptedSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lpmf(lpmfSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptiveM(adaptiveMSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptiveMWG(adaptiveMWGSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    update_eta_mh_cpp(eta, Bt, B, Theta, Omega, Sigmay_inv, sigmax_sqinv, Y, X, Z_int, uid, id, time, K, p, q, n, p_int, n_accepted, eps, A, b, lpmf, s, adaptiveM, adaptiveMWG, batch_size);
    return R_NilValue;
END_RCPP
}
// rgig_cpp
double rgig_cpp(double lam, double psi, double chi);
RcppExport SEXP _famr_rgig_cpp(SEXP lamSEXP, SEXP psiSEXP, SEXP chiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    rcpp_result_gen = Rcpp::wrap(rgig_cpp(lam, psi, chi));
    return rcpp_result_gen;
END_RCPP
}
// rig_cpp
double rig_cpp(double mu);
RcppExport SEXP _famr_rig_cpp(SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(rig_cpp(mu));
    return rcpp_result_gen;
END_RCPP
}
// ldinvgam
double ldinvgam(double x, double a, double b);
RcppExport SEXP _famr_ldinvgam(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ldinvgam(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// submat_cpp
arma::mat submat_cpp(arma::mat M, arma::uvec idx, arma::uvec idy);
RcppExport SEXP _famr_submat_cpp(SEXP MSEXP, SEXP idxSEXP, SEXP idySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idy(idySEXP);
    rcpp_result_gen = Rcpp::wrap(submat_cpp(M, idx, idy));
    return rcpp_result_gen;
END_RCPP
}
// impute_X_lod_cpp
arma::mat impute_X_lod_cpp(arma::mat eta, arma::mat Theta, arma::mat X, arma::vec sigmax_sqinv, int n, arma::mat Ilod, arma::vec llod, arma::vec ulod);
RcppExport SEXP _famr_impute_X_lod_cpp(SEXP etaSEXP, SEXP ThetaSEXP, SEXP XSEXP, SEXP sigmax_sqinvSEXP, SEXP nSEXP, SEXP IlodSEXP, SEXP llodSEXP, SEXP ulodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmax_sqinv(sigmax_sqinvSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ilod(IlodSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type llod(llodSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ulod(ulodSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_X_lod_cpp(eta, Theta, X, sigmax_sqinv, n, Ilod, llod, ulod));
    return rcpp_result_gen;
END_RCPP
}
// impute_Ymis_cpp
arma::mat impute_Ymis_cpp(arma::mat Y, arma::mat M, arma::mat Sigma, arma::mat O, int n, int t);
RcppExport SEXP _famr_impute_Ymis_cpp(SEXP YSEXP, SEXP MSEXP, SEXP SigmaSEXP, SEXP OSEXP, SEXP nSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type O(OSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_Ymis_cpp(Y, M, Sigma, O, n, t));
    return rcpp_result_gen;
END_RCPP
}
// impute_Yprobit_cpp
arma::mat impute_Yprobit_cpp(arma::mat Y, arma::mat M, arma::mat Sigma, arma::mat Yraw, arma::vec binary, int n, int t);
RcppExport SEXP _famr_impute_Yprobit_cpp(SEXP YSEXP, SEXP MSEXP, SEXP SigmaSEXP, SEXP YrawSEXP, SEXP binarySEXP, SEXP nSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yraw(YrawSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type binary(binarySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_Yprobit_cpp(Y, M, Sigma, Yraw, binary, n, t));
    return rcpp_result_gen;
END_RCPP
}
// update_Lambda_cpp
void update_Lambda_cpp(arma::mat& Lambda, const arma::cube& U, const arma::mat& Y, const arma::mat& eta, const arma::mat& S_inv, const arma::mat& phi, const arma::vec& tau, const arma::vec time, int n, int q, int K, int L);
RcppExport SEXP _famr_update_Lambda_cpp(SEXP LambdaSEXP, SEXP USEXP, SEXP YSEXP, SEXP etaSEXP, SEXP S_invSEXP, SEXP phiSEXP, SEXP tauSEXP, SEXP timeSEXP, SEXP nSEXP, SEXP qSEXP, SEXP KSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_inv(S_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    update_Lambda_cpp(Lambda, U, Y, eta, S_inv, phi, tau, time, n, q, K, L);
    return R_NilValue;
END_RCPP
}
// update_U_cpp
void update_U_cpp(arma::cube& U, const arma::mat& Y, const arma::mat& eta, const arma::mat& Lambda, const arma::vec& id, const arma::vec& time, const arma::mat& S_inv, const arma::mat& C_inv, int L, int K, int T, int q, int n);
RcppExport SEXP _famr_update_U_cpp(SEXP USEXP, SEXP YSEXP, SEXP etaSEXP, SEXP LambdaSEXP, SEXP idSEXP, SEXP timeSEXP, SEXP S_invSEXP, SEXP C_invSEXP, SEXP LSEXP, SEXP KSEXP, SEXP TSEXP, SEXP qSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_inv(S_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C_inv(C_invSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    update_U_cpp(U, Y, eta, Lambda, id, time, S_inv, C_inv, L, K, T, q, n);
    return R_NilValue;
END_RCPP
}
// covEQ
arma::mat covEQ(arma::vec t, double kappa, double amplitude);
RcppExport SEXP _famr_covEQ(SEXP tSEXP, SEXP kappaSEXP, SEXP amplitudeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type amplitude(amplitudeSEXP);
    rcpp_result_gen = Rcpp::wrap(covEQ(t, kappa, amplitude));
    return rcpp_result_gen;
END_RCPP
}
// llike_kappa
double llike_kappa(const arma::mat& Ci, double logdetC, const arma::cube& U, int L, int K);
RcppExport SEXP _famr_llike_kappa(SEXP CiSEXP, SEXP logdetCSEXP, SEXP USEXP, SEXP LSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Ci(CiSEXP);
    Rcpp::traits::input_parameter< double >::type logdetC(logdetCSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(llike_kappa(Ci, logdetC, U, L, K));
    return rcpp_result_gen;
END_RCPP
}
// update_kappa_cpp
Rcpp::List update_kappa_cpp(double kappa, arma::mat& Ci, arma::mat& C, double logdetC, double lpdf, arma::vec time, const arma::cube& U, double a, double b, int L, int K, double eps, int s, int batch_size, int n_accepted);
RcppExport SEXP _famr_update_kappa_cpp(SEXP kappaSEXP, SEXP CiSEXP, SEXP CSEXP, SEXP logdetCSEXP, SEXP lpdfSEXP, SEXP timeSEXP, SEXP USEXP, SEXP aSEXP, SEXP bSEXP, SEXP LSEXP, SEXP KSEXP, SEXP epsSEXP, SEXP sSEXP, SEXP batch_sizeSEXP, SEXP n_acceptedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ci(CiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type logdetC(logdetCSEXP);
    Rcpp::traits::input_parameter< double >::type lpdf(lpdfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_accepted(n_acceptedSEXP);
    rcpp_result_gen = Rcpp::wrap(update_kappa_cpp(kappa, Ci, C, logdetC, lpdf, time, U, a, b, L, K, eps, s, batch_size, n_accepted));
    return rcpp_result_gen;
END_RCPP
}
// update_Omega_TPBN_cpp
arma::mat update_Omega_TPBN_cpp(const arma::mat& Omega, const arma::mat& X, const arma::mat& Y, const arma::mat& Sigma, const arma::vec& psi);
RcppExport SEXP _famr_update_Omega_TPBN_cpp(SEXP OmegaSEXP, SEXP XSEXP, SEXP YSEXP, SEXP SigmaSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Omega_TPBN_cpp(Omega, X, Y, Sigma, psi));
    return rcpp_result_gen;
END_RCPP
}
// update_Omega_psi_cpp
void update_Omega_psi_cpp(arma::vec& psir, arma::vec& psic, const arma::cube& Omega, const arma::mat& Sigmainv, const arma::vec& zetar, const arma::vec& zetac, int K, int q);
RcppExport SEXP _famr_update_Omega_psi_cpp(SEXP psirSEXP, SEXP psicSEXP, SEXP OmegaSEXP, SEXP SigmainvSEXP, SEXP zetarSEXP, SEXP zetacSEXP, SEXP KSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type psir(psirSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type psic(psicSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigmainv(SigmainvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zetar(zetarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zetac(zetacSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    update_Omega_psi_cpp(psir, psic, Omega, Sigmainv, zetar, zetac, K, q);
    return R_NilValue;
END_RCPP
}
// update_Omega_zeta_cpp
void update_Omega_zeta_cpp(arma::vec& zeta, const arma::vec& psi, int K, double global_shrink);
RcppExport SEXP _famr_update_Omega_zeta_cpp(SEXP zetaSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP global_shrinkSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type global_shrink(global_shrinkSEXP);
    update_Omega_zeta_cpp(zeta, psi, K, global_shrink);
    return R_NilValue;
END_RCPP
}
// predict_interactions_cpp
void predict_interactions_cpp(arma::mat& Y, const arma::mat& X, const arma::cube& Omega, int n, int q);
RcppExport SEXP _famr_predict_interactions_cpp(SEXP YSEXP, SEXP XSEXP, SEXP OmegaSEXP, SEXP nSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    predict_interactions_cpp(Y, X, Omega, n, q);
    return R_NilValue;
END_RCPP
}
// update_Theta_MGP_cpp
arma::mat update_Theta_MGP_cpp(arma::mat eta, arma::vec sigmax_sqinv, arma::mat phi, arma::vec delta, arma::vec tau, int K, int p, arma::mat X);
RcppExport SEXP _famr_update_Theta_MGP_cpp(SEXP etaSEXP, SEXP sigmax_sqinvSEXP, SEXP phiSEXP, SEXP deltaSEXP, SEXP tauSEXP, SEXP KSEXP, SEXP pSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmax_sqinv(sigmax_sqinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Theta_MGP_cpp(eta, sigmax_sqinv, phi, delta, tau, K, p, X));
    return rcpp_result_gen;
END_RCPP
}
// update_phi_MGP_cpp
arma::mat update_phi_MGP_cpp(arma::mat Theta, arma::vec tau, int K, int p);
RcppExport SEXP _famr_update_phi_MGP_cpp(SEXP ThetaSEXP, SEXP tauSEXP, SEXP KSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_phi_MGP_cpp(Theta, tau, K, p));
    return rcpp_result_gen;
END_RCPP
}
// update_delta_MGP_cpp
arma::vec update_delta_MGP_cpp(arma::vec delta, arma::vec tau, arma::mat Theta, arma::mat phi, int K, int p, double a1, double a2);
RcppExport SEXP _famr_update_delta_MGP_cpp(SEXP deltaSEXP, SEXP tauSEXP, SEXP ThetaSEXP, SEXP phiSEXP, SEXP KSEXP, SEXP pSEXP, SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(update_delta_MGP_cpp(delta, tau, Theta, phi, K, p, a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// update_tau_DL_cpp
void update_tau_DL_cpp(arma::vec& tau, const arma::mat& Theta, const arma::mat& phi, const arma::mat& omega, int p, int K);
RcppExport SEXP _famr_update_tau_DL_cpp(SEXP tauSEXP, SEXP ThetaSEXP, SEXP phiSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    update_tau_DL_cpp(tau, Theta, phi, omega, p, K);
    return R_NilValue;
END_RCPP
}
// update_phi_DL_cpp
void update_phi_DL_cpp(arma::mat& phi, const arma::mat& Theta, int p, int K);
RcppExport SEXP _famr_update_phi_DL_cpp(SEXP phiSEXP, SEXP ThetaSEXP, SEXP pSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    update_phi_DL_cpp(phi, Theta, p, K);
    return R_NilValue;
END_RCPP
}
// update_omega_DL_cpp
void update_omega_DL_cpp(arma::mat& omega, const arma::mat& phi, const arma::mat& Theta, const arma::vec& tau);
RcppExport SEXP _famr_update_omega_DL_cpp(SEXP omegaSEXP, SEXP phiSEXP, SEXP ThetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    update_omega_DL_cpp(omega, phi, Theta, tau);
    return R_NilValue;
END_RCPP
}
// update_Theta_mh_cpp
void update_Theta_mh_cpp(arma::mat& Theta, const arma::vec& sigmax_sqinv, const arma::mat& X, const arma::vec& V0, arma::mat& n_accepted, arma::mat& eps, int s, bool adaptiveMWG);
RcppExport SEXP _famr_update_Theta_mh_cpp(SEXP ThetaSEXP, SEXP sigmax_sqinvSEXP, SEXP XSEXP, SEXP V0SEXP, SEXP n_acceptedSEXP, SEXP epsSEXP, SEXP sSEXP, SEXP adaptiveMWGSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmax_sqinv(sigmax_sqinvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type n_accepted(n_acceptedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptiveMWG(adaptiveMWGSEXP);
    update_Theta_mh_cpp(Theta, sigmax_sqinv, X, V0, n_accepted, eps, s, adaptiveMWG);
    return R_NilValue;
END_RCPP
}
// update_random_intercept_cpp
void update_random_intercept_cpp(arma::mat& xi, const arma::mat& Y, const arma::vec& id, const arma::vec& uid, const arma::mat& Sigma, const double sigmay_sqinv, const double nu_sqinv, int q, int n);
RcppExport SEXP _famr_update_random_intercept_cpp(SEXP xiSEXP, SEXP YSEXP, SEXP idSEXP, SEXP uidSEXP, SEXP SigmaSEXP, SEXP sigmay_sqinvSEXP, SEXP nu_sqinvSEXP, SEXP qSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type uid(uidSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmay_sqinv(sigmay_sqinvSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_sqinv(nu_sqinvSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    update_random_intercept_cpp(xi, Y, id, uid, Sigma, sigmay_sqinv, nu_sqinv, q, n);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_famr_update_intercept_cpp", (DL_FUNC) &_famr_update_intercept_cpp, 14},
    {"_famr_update_B_DL_cpp", (DL_FUNC) &_famr_update_B_DL_cpp, 8},
    {"_famr_update_nu_DL_cpp", (DL_FUNC) &_famr_update_nu_DL_cpp, 6},
    {"_famr_update_psi_DL_cpp", (DL_FUNC) &_famr_update_psi_DL_cpp, 4},
    {"_famr_update_zeta_DL_cpp", (DL_FUNC) &_famr_update_zeta_DL_cpp, 4},
    {"_famr_update_zeta_TPBN_cpp", (DL_FUNC) &_famr_update_zeta_TPBN_cpp, 3},
    {"_famr_update_psi_TPBN_cpp", (DL_FUNC) &_famr_update_psi_TPBN_cpp, 5},
    {"_famr_update_B_TPBN_cpp", (DL_FUNC) &_famr_update_B_TPBN_cpp, 6},
    {"_famr_update_B_GP_cpp", (DL_FUNC) &_famr_update_B_GP_cpp, 13},
    {"_famr_update_B_GP_amplitude_cpp", (DL_FUNC) &_famr_update_B_GP_amplitude_cpp, 10},
    {"_famr_update_eta_mh_cpp", (DL_FUNC) &_famr_update_eta_mh_cpp, 27},
    {"_famr_rgig_cpp", (DL_FUNC) &_famr_rgig_cpp, 3},
    {"_famr_rig_cpp", (DL_FUNC) &_famr_rig_cpp, 1},
    {"_famr_ldinvgam", (DL_FUNC) &_famr_ldinvgam, 3},
    {"_famr_submat_cpp", (DL_FUNC) &_famr_submat_cpp, 3},
    {"_famr_impute_X_lod_cpp", (DL_FUNC) &_famr_impute_X_lod_cpp, 8},
    {"_famr_impute_Ymis_cpp", (DL_FUNC) &_famr_impute_Ymis_cpp, 6},
    {"_famr_impute_Yprobit_cpp", (DL_FUNC) &_famr_impute_Yprobit_cpp, 7},
    {"_famr_update_Lambda_cpp", (DL_FUNC) &_famr_update_Lambda_cpp, 12},
    {"_famr_update_U_cpp", (DL_FUNC) &_famr_update_U_cpp, 13},
    {"_famr_covEQ", (DL_FUNC) &_famr_covEQ, 3},
    {"_famr_llike_kappa", (DL_FUNC) &_famr_llike_kappa, 5},
    {"_famr_update_kappa_cpp", (DL_FUNC) &_famr_update_kappa_cpp, 15},
    {"_famr_update_Omega_TPBN_cpp", (DL_FUNC) &_famr_update_Omega_TPBN_cpp, 5},
    {"_famr_update_Omega_psi_cpp", (DL_FUNC) &_famr_update_Omega_psi_cpp, 8},
    {"_famr_update_Omega_zeta_cpp", (DL_FUNC) &_famr_update_Omega_zeta_cpp, 4},
    {"_famr_predict_interactions_cpp", (DL_FUNC) &_famr_predict_interactions_cpp, 5},
    {"_famr_update_Theta_MGP_cpp", (DL_FUNC) &_famr_update_Theta_MGP_cpp, 8},
    {"_famr_update_phi_MGP_cpp", (DL_FUNC) &_famr_update_phi_MGP_cpp, 4},
    {"_famr_update_delta_MGP_cpp", (DL_FUNC) &_famr_update_delta_MGP_cpp, 8},
    {"_famr_update_tau_DL_cpp", (DL_FUNC) &_famr_update_tau_DL_cpp, 6},
    {"_famr_update_phi_DL_cpp", (DL_FUNC) &_famr_update_phi_DL_cpp, 4},
    {"_famr_update_omega_DL_cpp", (DL_FUNC) &_famr_update_omega_DL_cpp, 4},
    {"_famr_update_Theta_mh_cpp", (DL_FUNC) &_famr_update_Theta_mh_cpp, 8},
    {"_famr_update_random_intercept_cpp", (DL_FUNC) &_famr_update_random_intercept_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_famr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
